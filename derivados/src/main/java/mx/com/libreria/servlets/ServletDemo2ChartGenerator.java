package mx.com.libreria.servlets;

import java.io.IOException;
import java.io.OutputStream;

import javax.servlet.ServletException;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import mx.com.libreria.estructuras.ContadorFrecuencias;
import mx.com.libreria.estructuras.DataRow;
import mx.com.libreria.estructuras.DatosOpciones;

import mx.com.libreria.excel.ReadExcel;

import mx.com.libreria.files.SubirArchivos;

import mx.com.libreria.manager.Utilerias;

import mx.com.libreria.math.BlackAndScholes;
import mx.com.libreria.math.Calculate;
import mx.com.libreria.math.CalculoOpciones;
import mx.com.libreria.math.ForwardFuture;
import mx.com.libreria.math.Frecuencias;
import mx.com.libreria.math.Rendimientos;

import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;

/**
 * A servlet that returns one of three charts as a PNG image file. This servlet
 * is referenced in the HTML generated by ServletDemo2.
 * <P>
 * Three different charts can be generated, controlled by the ’type’ parameter.
 * The possible values are ’pie’, ’bar’ and ’time’ (for time series).
 * <P>
 * This class is described in the JFreeChart Developer Guide.
 */
public class ServletDemo2ChartGenerator extends HttpServlet {
	/**
	 * 
	 */
	private static final long serialVersionUID = -3781710958782302970L;

	/**
	 * Default constructor.
	 */
	public ServletDemo2ChartGenerator() {
		// nothing required
	}

	
	private JFreeChart opcionVentaCall(HttpServletRequest request) {
		
		double prima = BlackAndScholes.BSCall(
				Utilerias.strToDouble(request.getParameter("s0")), 
				Utilerias.strToDouble(request.getParameter("k")), 
				Utilerias.strToDouble(request.getParameter("r")), 
				Utilerias.strToDouble(request.getParameter("vol")),
				Utilerias.strToDouble(request.getParameter("tiempo")));					
				
		DatosOpciones datos = CalculoOpciones.getGraficaVentaCallOpcion(Utilerias.strToDouble(request.getParameter("s0")), 
				  Utilerias.strToDouble(request.getParameter("k")), 
				  prima);
		
		return CalculoOpciones.createTimeSeriesChartBest(datos, "Serie Call", "Venta de Call", "Prima Call: " + Utilerias.getDecimalFormat(prima), "");
		
	}
	
	private JFreeChart opcionVentaCallSolo(HttpServletRequest request) {
		
		double prima = Utilerias.strToDouble(request.getParameter("prima"));					
				
		DatosOpciones datos = CalculoOpciones.getGraficaVentaCallOpcion(Utilerias.strToDouble(request.getParameter("s0")), 
				  Utilerias.strToDouble(request.getParameter("k")), 
				  prima);
		
		return CalculoOpciones.createTimeSeriesChartBest(datos, "Serie Call", "Venta de Call", "Prima Call: " + Utilerias.getDecimalFormat(prima), "");
		
	}

	private JFreeChart opcionCompraCall(HttpServletRequest request) { 
		
		double prima = BlackAndScholes.BSCall(
				Utilerias.strToDouble(request.getParameter("s0")), 
				Utilerias.strToDouble(request.getParameter("k")), 
				Utilerias.strToDouble(request.getParameter("r")), 
				Utilerias.strToDouble(request.getParameter("vol")),
				Utilerias.strToDouble(request.getParameter("tiempo")));					
		
		DatosOpciones datos = CalculoOpciones.getGraficaCompraCallOpcion(Utilerias.strToDouble(request.getParameter("s0")), 
				  Utilerias.strToDouble(request.getParameter("k")), 
				  prima);
		
		return CalculoOpciones.createTimeSeriesChartBest(datos, "Serie Call", "Compra de Call", "Prima Call: " + Utilerias.getDecimalFormat(prima), "");
	}
	
	private JFreeChart opcionCompraCallSolo(HttpServletRequest request) { 							
		
		double prima = Utilerias.strToDouble(request.getParameter("prima"));
		
		DatosOpciones datos = CalculoOpciones.getGraficaCompraCallOpcion(Utilerias.strToDouble(request.getParameter("s0")), 
				  Utilerias.strToDouble(request.getParameter("k")), 
				  prima);
		
		return CalculoOpciones.createTimeSeriesChartBest(datos, "Serie Call", "Compra de Call", "Prima Call: " + Utilerias.getDecimalFormat(prima), "");
	}

	private JFreeChart opcionVentaPut(HttpServletRequest request) {
		
		double prima = BlackAndScholes.BSPut(
				Utilerias.strToDouble(request.getParameter("s0")), 
				Utilerias.strToDouble(request.getParameter("k")), 
				Utilerias.strToDouble(request.getParameter("r")), 
				Utilerias.strToDouble(request.getParameter("vol")),
				Utilerias.strToDouble(request.getParameter("tiempo")));					
				
		DatosOpciones datos = CalculoOpciones.getGraficaVentaPutOpcion(Utilerias.strToDouble(request.getParameter("s0")), 
				  Utilerias.strToDouble(request.getParameter("k")), 
				  prima);
		return CalculoOpciones.createTimeSeriesChartBest(datos, "Serie Put", "Venta de Put", "Prima Put: " + Utilerias.getDecimalFormat(prima), "");
	}
	
	private JFreeChart opcionVentaPutSolo(HttpServletRequest request) {
		
		double prima = Utilerias.strToDouble(request.getParameter("prima"));					
				
		DatosOpciones datos = CalculoOpciones.getGraficaVentaPutOpcion(Utilerias.strToDouble(request.getParameter("s0")), 
				  Utilerias.strToDouble(request.getParameter("k")), 
				  prima);
		
		return CalculoOpciones.createTimeSeriesChartBest(datos, "Serie Put", "Venta de Put", "Prima Put: " + Utilerias.getDecimalFormat(prima), "");
	}

	private JFreeChart futuros(HttpServletRequest request) {
		
		JFreeChart chart = null;
		DatosOpciones datos = null;
		
		if (request.getParameter("formaPago").equals("C")) { //compra 
			datos = ForwardFuture.getGraficaCompraForwardFuture(
					Utilerias.strToDouble(request.getParameter("s0")), 
					Utilerias.strToDouble(request.getParameter("k")));
			
			chart = ForwardFuture.createTimeSeriesChartBest(datos, "Serie Futuros", "Compra Futuro/Forward", "", "");
			
		} else if (request.getParameter("formaPago").equals("V")) { //venta 
			datos = ForwardFuture.getGraficaVentaForwardFuture(
					Utilerias.strToDouble(request.getParameter("s0")), 
					Utilerias.strToDouble(request.getParameter("k")));
			
			chart = ForwardFuture.createTimeSeriesChartBest(datos, "Serie Futuros", "Venta Futuro/Forward", "", "");
		}
		
		return chart;
		
	}
			
	private JFreeChart opcionCompraPut(HttpServletRequest request) {
		
		double prima = BlackAndScholes.BSPut(
				Utilerias.strToDouble(request.getParameter("s0")), 
				Utilerias.strToDouble(request.getParameter("k")), 
				Utilerias.strToDouble(request.getParameter("r")), 
				Utilerias.strToDouble(request.getParameter("vol")),
				Utilerias.strToDouble(request.getParameter("tiempo")));					
		
		DatosOpciones datos = CalculoOpciones.getGraficaCompraPutOpcion(Utilerias.strToDouble(request.getParameter("s0")), 
				  Utilerias.strToDouble(request.getParameter("k")), 
				  prima);
		
		return CalculoOpciones.createTimeSeriesChartBest(datos, "Serie Put", "Compra de Put", "Prima Put: " + Utilerias.getDecimalFormat(prima), "");
	}

	private JFreeChart opcionCompraPutSolo(HttpServletRequest request) {
		
		double prima = Utilerias.strToDouble(request.getParameter("prima"));					
		
		DatosOpciones datos = CalculoOpciones.getGraficaCompraPutOpcion(Utilerias.strToDouble(request.getParameter("s0")), 
				  Utilerias.strToDouble(request.getParameter("k")), 
				  prima);
		
		return CalculoOpciones.createTimeSeriesChartBest(datos, "Serie Put", "Compra de Put", "Prima Put: " + Utilerias.getDecimalFormat(prima), "");
	}

	private JFreeChart rendimientos(HttpServletRequest request) throws IOException {
		
		
		int indice = 1;
		
		ReadExcel test = new ReadExcel();
		test.setInputFile(SubirArchivos.getPathRepository() + request.getParameter("fichero"));
		
		DataRow datos = test.read();
				
		Rendimientos.calculaRendimientoContinuo(datos, indice);
		Rendimientos.calculaRendimientoCompuesto(datos, indice);
		Rendimientos.calculaRendimientoNormalizadoContinuo(datos, indice);
		
		int type = -1;
		StringBuffer sbTipo = new StringBuffer();
		if (request.getParameter("tipoRend") != null && request.getParameter("tipoRend").equals("CONT")) { 
			type = 0;
			sbTipo.append("Serie de Rendimientos Continuos");
		} else if (request.getParameter("tipoRend") != null && request.getParameter("tipoRend").equals("NORM")) {
			type = 1;
			sbTipo.append("Serie de Rendimientos Normalizados");
		} else if (request.getParameter("tipoRend") != null && request.getParameter("tipoRend").equals("COMP")) { 
			type = 2;
			sbTipo.append("Serie de Rendimientos Compuestos");
		}  			
		
		ContadorFrecuencias frec = Frecuencias.calculaFrecuencias(datos, type, indice, Calculate.getMin(datos, type, indice), 
																					   Calculate.getMax(datos, type, indice), 
																					   (Calculate.getMax(datos, type, indice) - Calculate.getMin(datos, type, indice)) / Utilerias.strToInt(request.getParameter("saltos")));
				
		StringBuffer sb = new StringBuffer();
		if (request.getParameter("periodicidad") != null && request.getParameter("periodicidad").equals("D")) { 
			sb.append("Hist Rend Diarios");
		} else if (request.getParameter("periodicidad") != null && request.getParameter("periodicidad").equals("S")) { 
			sb.append("Hist Rend Semanales");
		} else if (request.getParameter("periodicidad") != null && request.getParameter("periodicidad").equals("M")) { 
			sb.append("Hist Rend Mensuales");
		}
		
		return Frecuencias.createChart(frec, sbTipo.toString(), sb.toString(), 
				" Min: " + Utilerias.getDecimalFormat(Calculate.getMin(datos, type, indice)) + "," +
				" Max: " + Utilerias.getDecimalFormat(Calculate.getMax(datos, type, indice)) + "," +
				" Promedio: " + Utilerias.getDecimalFormat(Calculate.getMedia(datos, type, indice)),  				
				" Desv: " + Utilerias.getDecimalFormat(Calculate.getDesviacionEstandard(datos, type, indice)) + "," +  
				" Var: " + Utilerias.getDecimalFormat(Calculate.getVarianza(datos, type, indice)),  
				" Sesgo: " + Utilerias.getDecimalFormat(Calculate.getSesgo(datos, type, indice)) + "," + 
				" Curtosis: " + Utilerias.getDecimalFormat(Calculate.getCurtosis(datos, type, indice)));
	}
	
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		OutputStream out = response.getOutputStream();
		try {
			String type = request.getParameter("type");
			JFreeChart chart = null;
			
			if (type.equals("call")) {				
				if (request.getParameter("formaPago").equals("C")) { 
					chart = opcionCompraCall(request);
				} else if (request.getParameter("formaPago").equals("V")) {
					chart = opcionVentaCall(request);
				}										 				 													
			} else if (type.equals("put")) {
				if (request.getParameter("formaPago").equals("C")) { 
					chart = opcionCompraPut(request);
				} else if (request.getParameter("formaPago").equals("V")) {
					chart = opcionVentaPut(request);
				}			
			} else if (type.equals("callSolo")) {				
				if (request.getParameter("formaPago").equals("C")) { 
					chart = opcionCompraCallSolo(request);
				} else if (request.getParameter("formaPago").equals("V")) {
					chart = opcionVentaCallSolo(request);
				}										 				 													
			} else if (type.equals("putSolo")) {
				if (request.getParameter("formaPago").equals("C")) { 
					chart = opcionCompraPutSolo(request);
				} else if (request.getParameter("formaPago").equals("V")) {
					chart = opcionVentaPutSolo(request);
				}
			} else if (type.equals("rendimientos")) {
				chart = rendimientos(request);
			} else if (type.equals("futuro")) { 
				chart = futuros(request);									 			
			} else {
				System.out.println("none option");
			}
			
			if (chart != null) {
				response.setContentType("image/png");
				ChartUtilities.writeChartAsPNG(out, chart, 400, 300);				
			}
		} catch (Exception e) {
			System.err.println(e.toString());
		} finally {
			out.close();
		}
	}
}